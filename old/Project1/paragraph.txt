Chocoholics Anonymous, an organization with the goal of aiding chocolate addicts, has assigned our team with the task of creating a UML diagram that depicts the various use cases for the Chocoholics Anonymous software. Our team was composed of 6 members, with tasks distributed equally to reach efficient completion of the project. The softwares and languages utilized included HTML, UMLetino, and Bitbucket.  For this project, there were not many assumptions to be made given that Appendix A of the Chocoholics Anonymous document clearly laid out the tasks associated with each actor in the UML diagram. That being said, based on the UML diagram that our team produced, there is the assumption that each actor is familiar and capable of utilizing their individual terminal, and that no additional steps will be necessary to use the terminal. The tasks associated with Project 1 involved creating a UML diagram based on the interactions between the ChocAn software and the four actors who access the software. As a team, we determined the four actors to be the provider, automatic server, manager, and operator. The UML diagram, titled Joseff_UML, depicts the provider utilizing the software via the provider terminal. From the provider terminal, the provider will update and create new provider and member files. In order to create a member file, the provider must input both the member and provider information. It is important to note that in order to create a new member profile the software must first verify that the account is valid. If the account is invalid or suspended, no further interaction with the member profile can be achieved. Once that task has been completed, the provider will add the service the member is utilizing by using the associated service code. The second actor is the automatic server. The automatic server receives a weekly scheduled report, which is a task that the manager completes by using the manager terminal. These reports include a compilation of both the member and provider files. Lastly, there is the operator. The operator employs the operator terminal in order to add, remove, and update both member and provider files. The weekly provider file contains information regarding the provider, such as the name, account number, street address, etc. The same information is also included in the member file. The notable difference between the provider and member file is that the provider file includes not only the provider's information, but also the member’s information. The provider file also has payment information in regard to the fee that must be paid, and the total fee for the week. This information is not present in the member file. The final draft of the UML diagram along with all associated documents was submitted by Avery Fernandez. 
